@model IEnumerable<JewelryAuctionData.Models.Payment>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<div class="row">
    <div class="col-md-10">
        <h3 class="display-8">Payment List</h3>
    </div>
    <div class="col-md-2 text-end">
        <button type="button" class="btn btn-primary" onclick="add();">
            Add
        </button>
    </div> 
</div>

<div class="row mb-3">
    <div class="col-md-10">
        <input type="text" id="searchInput" class="form-control" placeholder="Search by PRICE, STATUS and TOTAL">
        <select id="statusInput">
            <option value="">Filter by Status</option>
            <option value="Paid">Paid</option>
            <option value="Pending">Pending</option>
            <option value="Completed">Completed</option>
            <!-- Add more options as needed -->
        </select>
        <select id="paymentMethodInput">
            <option value="">Filter by Payment Method</option>
            <option value="Credit Card">Credit Card</option>
            <option value="Bank Transfer">Bank Transfer</option>
            <option value="Momo">Momo</option>
        </select>
        <input type="number" id="minPriceInput" placeholder="Min Price">
        <input type="number" id="maxPriceInput" placeholder="Max Price">
        <button type="button" onclick="filter()">Apply Filter</button>
    </div>  
</div>

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr class="card-header">
                    <th class="card-title text-center">PaymentId</th>
                    <th class="card-title text-center">CustomerId</th>
                    <th class="card-title text-center">AuctionResultId</th>
                    <th class="card-title text-center">Status</th>
                    <th class="card-title text-center">PaymentMethod</th>
                    <th class="card-title text-center">Date</th>
                    <th class="card-title text-center">JewelryId</th>
                    <th class="card-title text-center">Fee</th>
                    <th class="card-title text-center">PercentFee</th>
                    <th class="card-title text-center">Price</th>
                    <th class="card-title text-center">TotalPrice</th>
                    <th class="card-title text-center">Actions</th>
                    <th class="card-title text-center"></th>
                </tr>
            </thead>
            <tbody class="tblPaymentList">
            </tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">Payment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-2">
                            <strong>Payment ID:</strong> <span id="detailPaymentId"></span>
                        </div>
                        <div class="mb-2">
                            <strong>Customer ID:</strong> <span id="detailCustomerId"></span>
                        </div>
                        <div class="mb-2">
                            <strong>Auction Result ID:</strong> <span id="detailAuctionResultId"></span>
                        </div>
                        <!-- Add other fields as needed -->
                    </div>
                    <div class="col-md-6">
                        <div class="mb-2">
                            <strong>Status:</strong> <span id="detailStatus"></span>
                        </div>
                        <div class="mb-2">
                            <strong>Payment Method:</strong> <span id="detailPaymentMethod"></span>
                        </div>
                        <div class="mb-2">
                            <strong>Date:</strong> <span id="detailDate"></span>
                        </div>
                        <div class="mb-2">
                            <strong>Jewelry ID:</strong> <span id="detailJewelryId"></span>
                        </div>
                        <!-- Add other fields as needed -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="topUpModal" tabindex="-1" aria-labelledby="topUpModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frm" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="topUpModalLabel">Add New Payment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="paymentId" name="paymentId">
                    <div class="form-group">
                        <label for="customerId">Customer ID:</label>
                        <input type="number" class="form-control" id="customerId" name="customerId" required>
                    </div>
                    <div class="form-group">
                        <label for="auctionResultId">Auction Result ID:</label>
                        <input type="number" class="form-control" id="auctionResultId" name="auctionResultId" required>
                    </div>
                    <div class="form-group">
                        <label for="status">Status:</label>
                        <input type="text" class="form-control" id="status" name="status" required>
                    </div>
                    <div class="form-group">
                        <label for="paymentMethod">Payment Method:</label>
                        <input type="text" class="form-control" id="paymentMethod" name="paymentMethod" required>
                    </div>
                    <div class="form-group">
                        <label for="date">Date:</label>
                        <input type="datetime-local" class="form-control" id="date" name="date" required>
                    </div>
                    <div class="form-group">
                        <label for="jewelryId">Jewelry ID:</label>
                        <input type="number" class="form-control" id="jewelryId" name="jewelryId" required>
                    </div>
                    <div class="form-group">
                        <label for="fee">Fee:</label>
                        <input type="number" class="form-control" id="fee" name="fee" required>
                    </div>
                    <div class="form-group">
                        <label for="percentFee">Percent Fee:</label>
                        <input type="number" class="form-control" id="percentFee" name="percentFee" required>
                    </div>
                    <div class="form-group">
                        <label for="price">Price:</label>
                        <input type="number" class="form-control" id="price" name="price" required>
                    </div>
                    <div class="form-group">
                        <label for="totalPrice">Total Price:</label>
                        <input type="number" class="form-control" id="totalPrice" name="totalPrice" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btSave" type="button" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        var action = "Create"; // Default action is to create new payment

        $(document).ready(function () {
            loadData(); // Initial data load on page load

            $("#btSave").click(function () {
                // Handle save button click to create or update payment
                var newPayment = {
                    paymentId: $("#paymentId").val(),
                    customerId: $("#customerId").val(),
                    auctionResultId: $("#auctionResultId").val(),
                    status: $("#status").val(),
                    paymentMethod: $("#paymentMethod").val(),
                    date: $("#date").val(),
                    jewelryId: $("#jewelryId").val(),
                    fee: $("#fee").val(),
                    percentFee: $("#percentFee").val(),
                    price: $("#price").val(),
                    totalPrice: $("#totalPrice").val()
                };

                $.ajax({
                    type: action === "Create" ? 'POST' : 'POST', // Adjust method type for create/update
                    url: action === "Create" ? '@Url.Action("Create", "Payments")' : '@Url.Action("Update", "Payments")',
                    contentType: 'application/json',
                    data: JSON.stringify(newPayment),
                    success: function (result) {
                        if (result.status === 1) {
                            $('#topUpModal').modal('hide');
                            loadData(); // Reload data after successful save
                        }
                        alert(result.message);
                    },
                    error: function (xhr, status, error) {
                        console.error("An error occurred while saving the Payment:", error);
                        alert("An error occurred while saving the Payment.");
                    }
                });
            });

            // Initialize the page with pagination
            loadPage(1);
        });


        function showDetails(paymentId) {
            $.ajax({
                url: '@Url.Action("GetPaymentById", "Payments")' + '?paymentId=' + paymentId,
                type: "GET",
                contentType: 'application/json',
                success: function (result) {
                    // Populate detail modal with payment data
                    $('#detailPaymentId').text(result.paymentId);
                    $('#detailCustomerId').text(result.customerId);
                    $('#detailAuctionResultId').text(result.auctionResultId);
                    $('#detailStatus').text(result.status);
                    $('#detailPaymentMethod').text(result.paymentMethod);
                    $('#detailDate').text(result.date);
                    $('#detailJewelryId').text(result.jewelryId);
                    // Update other fields as needed

                    $('#detailModal').modal('show'); // Show detail modal
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred while fetching payment details:", error);
                    alert("An error occurred while fetching payment details.");
                }
            });
        }

        // Function to load data with optional filters and pagination
        function loadData(searchTerm = "", status = "", paymentMethod = "", minPrice = null, maxPrice = null, pageNumber = 1, pageSize = 10) {
            var apiUrl = '@Url.Action("GetAll", "Payments")';
            var queryString = `?search=${searchTerm}&status=${status}&paymentMethod=${paymentMethod}&minPrice=${minPrice}&maxPrice=${maxPrice}&pageNumber=${pageNumber}&pageSize=${pageSize}`;

            $.ajax({
                url: apiUrl + queryString,
                type: "GET",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var html = '';
                    $.each(result, function (key, item) {
                        // Construct HTML table rows from JSON data
                        html += '<tr>';
                        html += '<td>' + item.paymentId + '</td>';
                        html += '<td>' + item.customerId + '</td>';
                        html += '<td>' + item.auctionResultId + '</td>';
                        html += '<td>' + item.status + '</td>';
                        html += '<td>' + item.paymentMethod + '</td>';
                        html += '<td>' + item.date + '</td>';
                        html += '<td>' + item.jewelryId + '</td>';
                        html += '<td>' + item.fee + '</td>';
                        html += '<td>' + item.percentFee + '</td>';
                        html += '<td>' + item.price + '</td>';
                        html += '<td>' + item.totalPrice + '</td>';
                        html += '<td><button type="button" class="btn btn-primary" onclick="editPayment(' + item.paymentId + ')">Edit</button></td>';
                        html += '<td><button type="button" class="btn btn-danger" onclick="deletePayment(' + item.paymentId + ')">Delete</button></td>';
                        html += '<td><button type="button" class="btn btn-info" onclick="showDetails(' +  item.paymentId + ')">Details</button></td>';
                        html += '</tr>';
                    });
                    $('.tblPaymentList').html(html); // Populate table body with generated HTML

                    updatePagination(result.pageNumber, result.totalPages); // Update pagination based on returned data
                },
                error: function (xhr, error) {
                    alert(xhr.statusText);
                }
            });
        }

        // Function to update pagination links
        function updatePagination(currentPage, totalPages) {
            var paginationHtml = '';
            if (totalPages > 1) {
                paginationHtml += '<ul class="pagination">';
                paginationHtml += '<li class="page-item ' + (currentPage === 1 ? 'disabled' : '') + '"><a class="page-link" href="#" onclick="loadPage(' + (currentPage - 1) + ')">Previous</a></li>';
                for (var i = 1; i <= totalPages; i++) {
                    paginationHtml += '<li class="page-item ' + (currentPage === i ? 'active' : '') + '"><a class="page-link" href="#" onclick="loadPage(' + i + ')">' + i + '</a></li>';
                }
                paginationHtml += '<li class="page-item ' + (currentPage === totalPages ? 'disabled' : '') + '"><a class="page-link" href="#" onclick="loadPage(' + (currentPage + 1) + ')">Next</a></li>';
                paginationHtml += '</ul>';
            }
            $('#pagination').html(paginationHtml); // Update HTML with generated pagination links
        }

        // Function to load specific page of data based on page number
        function loadPage(pageNumber) {
            var searchTerm = $("#searchInput").val();
            var status = $("#statusInput").val();
            var paymentMethod = $("#paymentMethodInput").val();
            var minPrice = $("#minPriceInput").val();
            var maxPrice = $("#maxPriceInput").val();
            var pageSize = 10; // Number of items per page

            loadData(searchTerm, status, paymentMethod, minPrice, maxPrice, pageNumber, pageSize);
        }

        // Function to apply filter and reload first page of data
        function filter() {
            loadPage(1); // Load the first page when filtering
        }

        // Function to handle search based on search input
        function search() {
            var searchTerm = $("#searchInput").val();
            loadData(searchTerm);
        }

        // Function to initialize the add new payment modal
        function add() {
            action = "Create"; // Set action to create new payment
            $("#paymentId").val(0); // Reset payment ID to 0
            $('#frm')[0].reset(); // Reset form fields
            $('#topUpModalLabel').html("Add New Payment"); // Set modal title
            $('#btSave').html("Save"); // Set save button text
            $('#topUpModal').modal('show'); // Show modal
        }

        // Function to handle editing a payment
        function editPayment(paymentId) {
            action = "Update"; // Set action to update payment
            $.ajax({
                url: '@Url.Action("GetPaymentById", "Payments")' + '?paymentId=' + paymentId,
                type: "GET",
                contentType: 'application/json',
                success: function (result) {
                    // Populate form fields with payment data
                    $('#paymentId').val(result.paymentId);
                    $('#customerId').val(result.customerId);
                    $('#auctionResultId').val(result.auctionResultId);
                    $('#status').val(result.status);
                    $('#paymentMethod').val(result.paymentMethod);
                    $('#date').val(result.date);
                    $('#jewelryId').val(result.jewelryId);
                    $('#fee').val(result.fee);
                    $('#percentFee').val(result.percentFee);
                    $('#price').val(result.price);
                    $('#totalPrice').val(result.totalPrice);

                    $('#topUpModalLabel').html("Edit Payment"); // Set modal title
                    $('#btSave').html("Save"); // Set save button text
                    $('#topUpModal').modal('show'); // Show modal
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred while fetching payment details:", error);
                    alert("An error occurred while fetching payment details.");
                }
            });
        }

        // Function to handle deletion of a payment
        function deletePayment(paymentId) {
            if (confirm('Are you sure you want to delete this payment?')) {
                $.ajax({
                    type: 'DELETE',
                    url: '@Url.Action("Delete", "Payments")' + '?paymentId=' + paymentId,
                    contentType: 'application/json',
                    success: function (result) {
                        if (result.status === 1) {
                            loadData(); // Reload data after successful deletion
                        }
                        alert(result.message);
                    },
                    error: function (xhr, status, error) {
                        console.error("An error occurred while deleting the Payment:", error);
                        alert("An error occurred while deleting the Payment.");
                    }
                });
            }
        }
    </script>
}

